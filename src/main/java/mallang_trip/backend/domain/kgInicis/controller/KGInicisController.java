package mallang_trip.backend.domain.kgInicis.controller;import io.swagger.annotations.Api;import io.swagger.annotations.ApiOperation;import lombok.RequiredArgsConstructor;import lombok.extern.slf4j.Slf4j;import mallang_trip.backend.domain.kgInicis.dto.InicisAuthUserInfoDto;import mallang_trip.backend.domain.kgInicis.dto.InicisCallbackRequestDto;import mallang_trip.backend.domain.kgInicis.dto.InicisFormInfoResponseDto;import mallang_trip.backend.domain.kgInicis.dto.InicisResultResponseDto;import mallang_trip.backend.domain.kgInicis.service.InicisIdentificationService;import mallang_trip.backend.global.io.BaseException;import org.springframework.http.HttpStatus;import org.springframework.http.MediaType;import org.springframework.http.ResponseEntity;import org.springframework.security.access.prepost.PreAuthorize;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.RestController;@Api(tags = "KG이니시스 본인인증 API")@Slf4j(topic = "IDENTIFICATION")@RestController@RequestMapping("/inicis")@RequiredArgsConstructorpublic class KGInicisController {    private final InicisIdentificationService authService;    @ApiOperation(value = "본인인증 창 데이터 요청")    @GetMapping("/form-data")    @PreAuthorize("permitAll()")    public ResponseEntity<InicisFormInfoResponseDto> getFormInfo() {        InicisFormInfoResponseDto formInfo = authService.generateFormInfo();        return ResponseEntity.ok(formInfo);    }    @ApiOperation(value = "본인인증 결과 call back")    @PostMapping(path = "/callback", consumes = MediaType.APPLICATION_FORM_URLENCODED_VALUE)    @PreAuthorize("permitAll()")    public ResponseEntity<InicisResultResponseDto> callback(        @RequestParam String resultCode,        @RequestParam String resultMsg,        @RequestParam String txId,        @RequestParam String authRequestUrl,        @RequestParam(required=false) String token    ) {        /*인증객체로 변환*/        InicisCallbackRequestDto requestDto = new InicisCallbackRequestDto(            resultCode,            resultMsg,            txId,            authRequestUrl,            token        );        InicisResultResponseDto response = null;        int statusCode = 200;        String redirectUrl = "https://mallangtrip.com/signup";        /*본인인증 실핼*/        try{            InicisAuthUserInfoDto responseDto = authService.verifyAndFetchUser(requestDto);// 개인정보 추출            response = authService.storeIdentificationInfo(responseDto);// 레디스에 정보 저장(회원가입)        } catch (BaseException e) {            statusCode = e.getStatus().getStatusCode();        } catch (RuntimeException e) {            statusCode = 500;// 예상치 못한 예외            log.error("예상하지 못한 예외 발생! cause: {}, message: {}", e.getCause().getMessage(), e.getMessage() );        }        if(response == null) {// 인증 실패            redirectUrl += "?statusCode=" + statusCode;            log.warn("pass 인증 실패. redirect uri: {}", redirectUrl);        } else {// 인증 성공            redirectUrl += "?impUid=" + response.mTxId();            redirectUrl += "&statusCode=" + statusCode;            log.info("pass 인증 성공. redirect uri: {}", redirectUrl);        }        return ResponseEntity.status(HttpStatus.MOVED_PERMANENTLY)            .header("Location", redirectUrl)// 말랑트립 회원가입 페이지로 리다이렉트            .build();    }}